
/**************************************************
*************** DO NOT EDIT THIS FILE *************
**************************************************/

class MessageValidationError extends Error {
  name = 'MessageValidationError'
}
class InternalServerError extends Error {
  name = 'InternalServerError'
}

const getFuzzyServerResponseDelay = (min = 100, max = 2000) => (
  Math.max(
    min,
    Math.min(
      Math.round(Math.random() * Math.random() * 1300),
      max
    )
  )
);

const authorId = Math.round(Math.random() * Math.random() * 100000);
let messageId = 0;

const createServerMessage = ({ message }) => ({
  ...message,
  authorId,
  createdAt: Date.now(),
  id: ++messageId,
});

const getValidationError = (message) => {

  // only allow certain keys
  const allowedKeys = new Set(['body', 'createdAt', 'context', 'id', 'authorId', 'attributes', 'conversationId']);
  const givenKeys = new Set(Object.keys(message));
  allowedKeys.forEach(key => givenKeys.delete(key))
  if (givenKeys.size) {
    const invalidKeys = [];
    givenKeys.forEach(invalidKey => invalidKeys.push(invalidKey));
    return new MessageValidationError(`The keys [${invalidKeys.join(', ')}] are not allowed to appear on a message`);
  }

  // require a body
  if (!message.body) {
    return new MessageValidationError('A message must have a "body"');
  }
}

export default {
  sendMessage: (message) => {
    const response = new Promise((res, rej) => {
      const serverMessage = createServerMessage({ message });
      const apiSuccess = Math.random() > 0.1;
      const validationError = getValidationError(message);
      if (apiSuccess && !validationError) {
        setTimeout(res.bind(null, { messageFromServer: serverMessage }), getFuzzyServerResponseDelay());
      } else {
        if (validationError) {
          setTimeout(rej.bind(null, { messageFromServer: serverMessage, error: validationError }), getFuzzyServerResponseDelay());
        } else {
          setTimeout(rej.bind(null, { messageFromServer: serverMessage, error: new InternalServerError("Server gave a 500") }), getFuzzyServerResponseDelay());
        }
      }
    });
    return response;
  }
}
